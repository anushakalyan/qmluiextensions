/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
**     the names of its contributors may be used to endorse or promote
**     products derived from this software without specific prior written
**     permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \page qt-components-meego-introduction.html
    \group qt-components
    \title Qt-Components
    \ingroup groups
    
    \title Introduction to the Qt Quick components
    
    The Qt Quick components are built on top of Qt Quick and provide native-look 
    user interface elements for your QML-based applications. They are bundled together as 
    a module that you can import into your QML file. Once you have imported the 
    components module, you can use the components just as you would use standard 
    QML elements such as Rectangle and Text. As with normal QML applications, 
    you can still use JavaScript and/or Qt C++ for the business logic of your application.   

    \section1 Cross-Platform Development
    The components are implemented separately for both Symbian and MeeGo 1.2 Harmattan. 
    This has been done so that they can be easily made to match the native 
    look and feel of each platform. In order to keep the implementations 
    compatible, there is a common API definition that each implementation 
    must comply with. This means you can use components based on the common 
    APIs for your application interface and it will work on both platforms.

    However, a platform often has ways of doing things that are particular to 
    that platform. During the development of the components, a design decision 
    was made to implement these platform-specific features as extensions to the 
    common APIs or as separate components where appropriate. This keeps the 
    common APIs small and streamlined rather than becoming bloated by all the 
    little bits and pieces special for every platform. So, when developing an 
    application, you can develop the core of your user interface in a cross- 
    platform manner. After you have that done, optimise your the interface 
    to take advantage of features specific to each particular platform. In 
    practice, this means you need to create separate variant files for the parts 
    of your application that use platform-specific features. However, these 
    differences are generally small and, due to the declarative nature of the 
    QML language, it is fast to create these variants.

    \list
    \o Common API components - These APIs are common to each platform and auto-tests ensure that each platform conforms to these standardised APIs.
    \o Common API components with platform-specific extensions - These are properties, methods and signals that extend a common API and are only available on a particular platform. They are identified by "platform" at the start of the name.
    \o Platform-specific components - These components are only available for a particular platform.
    \endlist
    
    \section1 Using the Components 
    You can use the Qt Quick components in your QML application with one of the following 
    imports at the top of your QML document:

    \code
    import com.nokia.meego      // MeeGo 1.2 Harmattan components
    \endcode

    When using components it is necessary to use Window or PageStackWindow component
    as a base component for the application. If those are not used some of the features
    provided by the Qt Quick Components does not work.
    
    There is also a cross-platform import in development but you should consider it 
    as "experimental" for now. Do not be surprised if it does not work how you might expect.

    \code
    import Qt.labs.components.native 1.0  // Qt Quick components
    \endcode
    
*/
