/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
**     the names of its contributors may be used to endorse or promote
**     products derived from this software without specific prior written
**     permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \qmlclass Button
    \inherits Item
    \ingroup qt-components
    \since 4.7

    \brief
    A Button component has a label and click event handling.

    The Button is a component that accepts user input and sends a \l clicked signal for
    the application to handle. The Button has resizable properties, event
    handling, and it can undergo state changes and transitions.

    Note that you can put inside this components icons with size up to 40x40 pixels, 
    but the preffered size is 32x32 pixels.

    \qml
       // Create a button with different icon states
       Button {
           text: "Icon state button"
           iconSource: "assets/icon_" + (pressed ? "pressed" : "normal") + ".png"
       }
       // This approach works for all supported states: normal, disabled, pressed, selected, selected && disabled
    \endqml

*/

/*!
    \qmlproperty bool Button::checkable

    Property default is false

    If a button's \c checkable property is set to \c true, then it can have
    two alternative \c checked states, on or off. If the button is \c checked,
    then \c checked is true. The \c checkable and \l Button::checked properties are set
    to \c false by default.

    \snippet src/snippets/meego/snippet-button.qml 3
*/

/*!
    \qmlproperty bool Button::checked

    Property default is false

    Specify the checked state. It only works if \l Button::checkable is set to \c true
*/

/*!
    \qmlsignal Button::clicked()

    Signal for detecting button clicks. If the button is pressed and released, then
    this signal is emitted.

    The signal handler, \c onClicked(), can bind to state changes or other actions.
*/

/*!
    \qmlproperty bool Button::enabled

    Property default is \c true

    Enables or disables the component. Notice that the disable state is not Toolkit compliant
    but is supported on qt-components as well.
    
    \snippet src/snippets/meego/snippet-button.qml 4
*/

/*!
    \qmlproperty url Button::iconSource

    Property default is \c ""

    The path to the icon image to be used. To have a different icon for the checked state, 
    write: \code iconSource: (checked) ? "path to icon checked" : "path to normal icon" \endcode
*/

/*!
    \qmlproperty bool Button::pressed

    (ReadOnly) Is \c true when the button is pressed.
*/

/*!
    \qmlproperty string Button::text

    Property default is \c ""

    The text displayed on button.
*/

/*!
    \qmlproperty QtObject Button::platformStyle

    Property default is \c ButtonStyle{}

    Property for styling the component.
    Set one of the following style elements:
    \list
    \o \c ButtonStyle{ inverted: true } - Used on dark background
    \endlist

    \sa ButtonStyle
*/

/*!
    \qmlproperty Style Button::platformStyle

    Property default is \c ButtonStyle{}

    Property for styling the component.
    Set one of the following style elements:
    \list
    \o \c ButtonStyle{ inverted: true } - Used on dark background
    \endlist

    \sa ButtonStyle
*/


/*!
    \qmlproperty variant Button::platformMouseAnchors

    Platform specific access to button's mouse area anchors. The mouse area
    is used to listen to users click events.
*/
